generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum KYCStatus {
  pending
  approved
  declined
}

enum DepositStatus {
  pending
  reviewing
  verified
}

enum TransactionType {
  deposit
  withdrawal
  purchase
  transfer
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  firstname      String
  lastname       String
  number         String
  password       String
  emailVerified  DateTime?
  kycVerified    DateTime?
  image          String?
  address        String?
  nationality    String?
  identification String?
  gender         String?
  role           UserRole  @default(USER)
  otp            String? // Store OTP
  otpExpires     DateTime? // OTP expiration time

  deposits       Deposit[]
  kyc            kyc?
  accountBalance AccountBalance?
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Deposit {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  walletAddress String
  amount        Float
  currency      String
  status        DepositStatus @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  verifiedAt    DateTime?

  user User @relation(fields: [userId], references: [id])
}

model kyc {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @unique @db.ObjectId
  status     KYCStatus @default(pending)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model AccountBalance {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @unique @db.ObjectId
  balance      Float         @default(0.0)
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  balanceId  String          @db.ObjectId
  type       TransactionType
  amount     Float
  createdAt  DateTime        @default(now())
  balance    AccountBalance  @relation(fields: [balanceId], references: [id])
  senderId   String?         @db.ObjectId
  receiverId String?         @db.ObjectId
}

model Wallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  currency  String   @unique
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
